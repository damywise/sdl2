// THIS FILE IS GENERATED AUTOMATICALLY AND SHOULD NOT BE EDITED DIRECTLY.
//const _SDL_H = ;
const SDL_INIT_TIMER = 0x00000001;
const SDL_INIT_AUDIO = 0x00000010;
const SDL_INIT_VIDEO = 0x00000020;
const SDL_INIT_JOYSTICK = 0x00000200;
const SDL_INIT_HAPTIC = 0x00001000;
const SDL_INIT_GAMECONTROLLER = 0x00002000;
const SDL_INIT_EVENTS = 0x00004000;
const SDL_INIT_NOPARACHUTE = 0x00100000;
const SDL_INIT_EVERYTHING = ( SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER );
//const _SDL_assert_h = ;
//const SDL_ASSERT_LEVEL = SDL_DEFAULT_ASSERT_LEVEL;
//const SDL_TriggerBreakpoint = () __debugbreak();
//const SDL_FUNCTION = __func__;
//const SDL_FILE = __FILE__;
//const SDL_LINE = __LINE__;
//const SDL_disabled_assert = (condition) do { (void) sizeof ((condition)); } while (0);
const SDL_ASSERTION_RETRY = 0;
const SDL_ASSERTION_BREAK = 1;
const SDL_ASSERTION_ABORT = 2;
const SDL_ASSERTION_IGNORE = 3;
const SDL_ASSERTION_ALWAYS_IGNORE = 4;
//const SDL_enabled_assert = (condition) do { while ( !(condition) ) { static struct SDL_assert_data assert_data = { 0, 0, #condition, 0, 0, 0, 0 }; const SDL_assert_state state = SDL_ReportAssertion(&assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE); if (state == SDL_ASSERTION_RETRY) { continue; } } while (0);
//const SDL_assert = (condition) SDL_disabled_assert(condition);
//const SDL_assert_release = (condition) SDL_disabled_assert(condition);
//const SDL_assert_paranoid = (condition) SDL_disabled_assert(condition);
//const _SDL_atomic_h_ = ;
const HAVE_MSC_ATOMICS = 1;
//const SDL_CompilerBarrier = () _ReadWriteBarrier();
//const SDL_MemoryBarrierRelease = () __asm__ __volatile__ ("lwsync" : : : "memory");
//const SDL_MemoryBarrierAcquire = () __asm__ __volatile__ ("lwsync" : : : "memory");
//const SDL_DISABLE_ATOMIC_INLINE = ;
//const SDL_AtomicSet = (a, v) _InterlockedExchange((long*)&(a)->value, (v));
//const SDL_AtomicAdd = (a, v) _InterlockedExchangeAdd((long*)&(a)->value, (v));
//const SDL_AtomicCAS = (a, oldval, newval) (_InterlockedCompareExchange((long*)&(a)->value, (newval), (oldval)) == (oldval));
//const SDL_AtomicSetPtr = (a, v) _InterlockedExchangePointer((a), (v));
//const SDL_AtomicCASPtr = (a, oldval, newval) (_InterlockedCompareExchange((long*)(a), (long)(newval), (long)(oldval)) == (long)(oldval));
//const SDL_AtomicIncRef = (a) SDL_AtomicAdd(a, 1);
//const SDL_AtomicDecRef = (a) (SDL_AtomicAdd(a, -1) == 1);
//const _SDL_audio_h = ;
const SDL_AUDIO_MASK_BITSIZE = (0xFF);
const SDL_AUDIO_MASK_DATATYPE = (1<<8);
const SDL_AUDIO_MASK_ENDIAN = (1<<12);
const SDL_AUDIO_MASK_SIGNED = (1<<15);
//const SDL_AUDIO_BITSIZE = (x) (x & SDL_AUDIO_MASK_BITSIZE);
//const SDL_AUDIO_ISFLOAT = (x) (x & SDL_AUDIO_MASK_DATATYPE);
//const SDL_AUDIO_ISBIGENDIAN = (x) (x & SDL_AUDIO_MASK_ENDIAN);
//const SDL_AUDIO_ISSIGNED = (x) (x & SDL_AUDIO_MASK_SIGNED);
//const SDL_AUDIO_ISINT = (x) (!SDL_AUDIO_ISFLOAT(x));
//const SDL_AUDIO_ISLITTLEENDIAN = (x) (!SDL_AUDIO_ISBIGENDIAN(x));
//const SDL_AUDIO_ISUNSIGNED = (x) (!SDL_AUDIO_ISSIGNED(x));
const AUDIO_U8 = 0x0008;
const AUDIO_S8 = 0x8008;
const AUDIO_U16LSB = 0x0010;
const AUDIO_S16LSB = 0x8010;
const AUDIO_U16MSB = 0x1010;
const AUDIO_S16MSB = 0x9010;
const AUDIO_U16 = AUDIO_U16LSB;
const AUDIO_S16 = AUDIO_S16LSB;
const AUDIO_S32LSB = 0x8020;
const AUDIO_S32MSB = 0x9020;
const AUDIO_S32 = AUDIO_S32LSB;
const AUDIO_F32LSB = 0x8120;
const AUDIO_F32MSB = 0x9120;
const AUDIO_F32 = AUDIO_F32LSB;
const AUDIO_U16SYS = AUDIO_U16LSB;
const AUDIO_S16SYS = AUDIO_S16LSB;
const AUDIO_S32SYS = AUDIO_S32LSB;
const AUDIO_F32SYS = AUDIO_F32LSB;
const SDL_AUDIO_ALLOW_FREQUENCY_CHANGE = 0x00000001;
const SDL_AUDIO_ALLOW_FORMAT_CHANGE = 0x00000002;
const SDL_AUDIO_ALLOW_CHANNELS_CHANGE = 0x00000004;
const SDL_AUDIO_ALLOW_ANY_CHANGE = (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE|SDL_AUDIO_ALLOW_FORMAT_CHANGE|SDL_AUDIO_ALLOW_CHANNELS_CHANGE);
//const SDL_AUDIOCVT_PACKED = __attribute__((packed));
const SDL_AUDIO_STOPPED = 0;
const SDL_AUDIO_PLAYING = 0 + 1;
const SDL_AUDIO_PAUSED = 0 + 2;
//const SDL_LoadWAV = (file, spec, audio_buf, audio_len) SDL_LoadWAV_RW(SDL_RWFromFile(file, "rb"),1, spec,audio_buf,audio_len);
const SDL_MIX_MAXVOLUME = 128;
//const _SDL_bits_h = ;
//const _SDL_blendmode_h = ;
const SDL_BLENDMODE_NONE = 0x00000000;
const SDL_BLENDMODE_BLEND = 0x00000001;
const SDL_BLENDMODE_ADD = 0x00000002;
const SDL_BLENDMODE_MOD = 0x00000004;
//const _SDL_clipboard_h = ;
//const _SDL_config_h = ;
const SIZEOF_VOIDP = 8;
const HAVE_GCC_ATOMICS = 1;
const HAVE_PTHREAD_SPINLOCK = 1;
const HAVE_LIBC = 1;
const HAVE_ALLOCA_H = 1;
const HAVE_SYS_TYPES_H = 1;
const HAVE_STDIO_H = 1;
const STDC_HEADERS = 1;
const HAVE_STDLIB_H = 1;
const HAVE_STDARG_H = 1;
const HAVE_MALLOC_H = 1;
const HAVE_MEMORY_H = 1;
const HAVE_STRING_H = 1;
const HAVE_STRINGS_H = 1;
const HAVE_INTTYPES_H = 1;
const HAVE_STDINT_H = 1;
const HAVE_CTYPE_H = 1;
const HAVE_MATH_H = 1;
const HAVE_ICONV_H = 1;
const HAVE_SIGNAL_H = 1;
const HAVE_LIBUDEV_H = 1;
const HAVE_DBUS_DBUS_H = 1;
const HAVE_MALLOC = 1;
const HAVE_CALLOC = 1;
const HAVE_REALLOC = 1;
const HAVE_FREE = 1;
const HAVE_ALLOCA = 1;
const HAVE_GETENV = 1;
const HAVE_SETENV = 1;
const HAVE_PUTENV = 1;
const HAVE_UNSETENV = 1;
const HAVE_QSORT = 1;
const HAVE_ABS = 1;
const HAVE_BCOPY = 1;
const HAVE_MEMSET = 1;
const HAVE_MEMCPY = 1;
const HAVE_MEMMOVE = 1;
const HAVE_MEMCMP = 1;
const HAVE_STRLEN = 1;
const HAVE_STRDUP = 1;
const HAVE_STRCHR = 1;
const HAVE_STRRCHR = 1;
const HAVE_STRSTR = 1;
const HAVE_STRTOL = 1;
const HAVE_STRTOUL = 1;
const HAVE_STRTOLL = 1;
const HAVE_STRTOULL = 1;
const HAVE_STRTOD = 1;
const HAVE_ATOI = 1;
const HAVE_ATOF = 1;
const HAVE_STRCMP = 1;
const HAVE_STRNCMP = 1;
const HAVE_STRCASECMP = 1;
const HAVE_STRNCASECMP = 1;
const HAVE_SSCANF = 1;
const HAVE_SNPRINTF = 1;
const HAVE_VSNPRINTF = 1;
//const HAVE_M_PI = ;
const HAVE_ATAN = 1;
const HAVE_ATAN2 = 1;
const HAVE_CEIL = 1;
const HAVE_COPYSIGN = 1;
const HAVE_COS = 1;
const HAVE_COSF = 1;
const HAVE_FABS = 1;
const HAVE_FLOOR = 1;
const HAVE_LOG = 1;
const HAVE_POW = 1;
const HAVE_SCALBN = 1;
const HAVE_SIN = 1;
const HAVE_SINF = 1;
const HAVE_SQRT = 1;
const HAVE_FSEEKO = 1;
const HAVE_FSEEKO64 = 1;
const HAVE_SIGACTION = 1;
const HAVE_SA_SIGACTION = 1;
const HAVE_SETJMP = 1;
const HAVE_NANOSLEEP = 1;
const HAVE_SYSCONF = 1;
const HAVE_CLOCK_GETTIME = 1;
const HAVE_MPROTECT = 1;
const HAVE_ICONV = 1;
const HAVE_PTHREAD_SETNAME_NP = 1;
const HAVE_SEM_TIMEDWAIT = 1;
const HAVE_STDDEF_H = 1;
const SDL_AUDIO_DRIVER_ALSA = 1;
const SDL_AUDIO_DRIVER_ALSA_DYNAMIC = 'libasound.so.2';
const SDL_AUDIO_DRIVER_DISK = 1;
const SDL_AUDIO_DRIVER_DUMMY = 1;
const SDL_AUDIO_DRIVER_ESD = 1;
const SDL_AUDIO_DRIVER_ESD_DYNAMIC = 'libesd.so.0';
const SDL_AUDIO_DRIVER_OSS = 1;
const SDL_INPUT_LINUXEV = 1;
const SDL_JOYSTICK_LINUX = 1;
const SDL_HAPTIC_LINUX = 1;
const SDL_LOADSO_DLOPEN = 1;
const SDL_THREAD_PTHREAD = 1;
const SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = 1;
const SDL_TIMER_UNIX = 1;
const SDL_VIDEO_DRIVER_DUMMY = 1;
const SDL_VIDEO_DRIVER_X11 = 1;
const SDL_VIDEO_DRIVER_X11_DYNAMIC = 'libX11.so.6';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = 'libXext.so.6';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR = 'libXcursor.so.1';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA = 'libXinerama.so.1';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 = 'libXi.so.6';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR = 'libXrandr.so.2';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS = 'libXss.so.1';
const SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE = 'libXxf86vm.so.1';
const SDL_VIDEO_DRIVER_X11_XCURSOR = 1;
const SDL_VIDEO_DRIVER_X11_XINERAMA = 1;
const SDL_VIDEO_DRIVER_X11_XINPUT2 = 1;
const SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH = 1;
const SDL_VIDEO_DRIVER_X11_XRANDR = 1;
const SDL_VIDEO_DRIVER_X11_XSCRNSAVER = 1;
const SDL_VIDEO_DRIVER_X11_XSHAPE = 1;
const SDL_VIDEO_DRIVER_X11_XVIDMODE = 1;
const SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS = 1;
const SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY = 1;
const SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM = 1;
const SDL_VIDEO_RENDER_OGL = 1;
const SDL_VIDEO_RENDER_OGL_ES = 1;
const SDL_VIDEO_RENDER_OGL_ES2 = 1;
const SDL_VIDEO_OPENGL = 1;
const SDL_VIDEO_OPENGL_ES = 1;
const SDL_VIDEO_OPENGL_GLX = 1;
const SDL_POWER_LINUX = 1;
const SDL_ASSEMBLY_ROUTINES = 1;
//const _SDL_config_android_h = ;
const HAVE_STRLCPY = 1;
const HAVE_STRLCAT = 1;
const SDL_AUDIO_DRIVER_ANDROID = 1;
const SDL_JOYSTICK_ANDROID = 1;
const SDL_HAPTIC_DUMMY = 1;
const SDL_VIDEO_DRIVER_ANDROID = 1;
const SDL_POWER_ANDROID = 1;
//const _SDL_config_iphoneos_h = ;
const HAVE_SYSCTLBYNAME = 1;
const SDL_AUDIO_DRIVER_COREAUDIO = 1;
const SDL_HAPTIC_DISABLED = 1;
const SDL_LOADSO_DISABLED = 1;
const SDL_VIDEO_DRIVER_UIKIT = 1;
const SDL_POWER_UIKIT = 1;
const SDL_IPHONE_KEYBOARD = 1;
const SDL_JOYSTICK_DISABLED = 0;
const SDL_IPHONE_MAX_GFORCE = 5.0;
//const _SDL_config_macosx_h = ;
const SDL_JOYSTICK_IOKIT = 1;
const SDL_HAPTIC_IOKIT = 1;
const SDL_VIDEO_DRIVER_COCOA = 1;
const SDL_VIDEO_OPENGL_CGL = 1;
const SDL_POWER_MACOSX = 1;
const SDL_ALTIVEC_BLITTERS = 1;
//const _SDL_config_minimal_h = ;
const HAVE_GCC_SYNC_LOCK_TEST_AND_SET = 1;
const SDL_THREADS_DISABLED = 1;
const SDL_TIMERS_DISABLED = 1;
const SDL_BYTEORDER = 1234;
const SDL_INPUT_TSLIB = 1;
const SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP = 1;
const SDL_VIDEO_DRIVER_PANDORA = 1;
//const _SDL_config_psp_h = ;
const LACKS_SYS_MMAN_H = 1;
const SDL_THREAD_PSP = 1;
const SDL_TIMERS_PSP = 1;
const SDL_JOYSTICK_PSP = 1;
const SDL_AUDIO_DRIVER_PSP = 1;
const SDL_VIDEO_DRIVER_PSP = 1;
const SDL_VIDEO_RENDER_PSP = 1;
const SDL_POWER_PSP = 1;
//const _SDL_config_windows_h = ;
//const _UINTPTR_T_DEFINED = ;
//const DWORD_PTR = DWORD;
//const LONG_PTR = LONG;
//const _SIZE_T_DEFINED_ = ;
const HAVE__STRREV = 1;
const HAVE__STRUPR = 1;
const HAVE__STRLWR = 1;
const HAVE_ITOA = 1;
const HAVE__LTOA = 1;
const HAVE__ULTOA = 1;
const HAVE__STRICMP = 1;
const HAVE__STRNICMP = 1;
const SDL_AUDIO_DRIVER_DSOUND = 1;
const SDL_AUDIO_DRIVER_XAUDIO2 = 1;
const SDL_AUDIO_DRIVER_WINMM = 1;
const SDL_JOYSTICK_DINPUT = 1;
const SDL_HAPTIC_DINPUT = 1;
const SDL_LOADSO_WINDOWS = 1;
const SDL_THREAD_WINDOWS = 1;
const SDL_TIMER_WINDOWS = 1;
const SDL_VIDEO_DRIVER_WINDOWS = 1;
const SDL_VIDEO_RENDER_D3D = 1;
const SDL_VIDEO_OPENGL_WGL = 1;
const SDL_POWER_WINDOWS = 1;
const SDL_CDROM_DISABLED = 1;
//const _SDL_cpuinfo_h = ;
//const __MMX__ = ;
//const __3dNOW__ = ;
//const __SSE__ = ;
//const __SSE2__ = ;
const SDL_CACHELINE_SIZE = 128;
//const _SDL_endian_h = ;
const SDL_LIL_ENDIAN = 1234;
const SDL_BIG_ENDIAN = 4321;
//const SDL_SwapLE16 = (X) (X);
//const SDL_SwapLE32 = (X) (X);
//const SDL_SwapLE64 = (X) (X);
//const SDL_SwapFloatLE = (X) (X);
//const SDL_SwapBE16 = (X) SDL_Swap16(X);
//const SDL_SwapBE32 = (X) SDL_Swap32(X);
//const SDL_SwapBE64 = (X) SDL_Swap64(X);
//const SDL_SwapFloatBE = (X) SDL_SwapFloat(X);
//const _SDL_error_h = ;
//const SDL_OutOfMemory = () SDL_Error(SDL_ENOMEM);
//const SDL_Unsupported = () SDL_Error(SDL_UNSUPPORTED);
//const SDL_InvalidParamError = (param) SDL_SetError("Parameter '%s' is invalid", (param));
const SDL_ENOMEM = 0;
const SDL_EFREAD = 1;
const SDL_EFWRITE = 2;
const SDL_EFSEEK = 3;
const SDL_UNSUPPORTED = 4;
const SDL_LASTERROR = 5;
//const _SDL_events_h = ;
const SDL_RELEASED = 0;
const SDL_PRESSED = 1;
const SDL_FIRSTEVENT = 0;
const SDL_QUIT = 0x100;
const SDL_APP_TERMINATING = 0x100 + 1;
const SDL_APP_LOWMEMORY = 0x100 + 2;
const SDL_APP_WILLENTERBACKGROUND = 0x100 + 3;
const SDL_APP_DIDENTERBACKGROUND = 0x100 + 4;
const SDL_APP_WILLENTERFOREGROUND = 0x100 + 5;
const SDL_APP_DIDENTERFOREGROUND = 0x100 + 6;
const SDL_WINDOWEVENT = 0x200;
const SDL_SYSWMEVENT = 0x200 + 1;
const SDL_KEYDOWN = 0x300;
const SDL_KEYUP = 0x300 + 1;
const SDL_TEXTEDITING = 0x300 + 2;
const SDL_TEXTINPUT = 0x300 + 3;
const SDL_MOUSEMOTION = 0x400;
const SDL_MOUSEBUTTONDOWN = 0x400 + 1;
const SDL_MOUSEBUTTONUP = 0x400 + 2;
const SDL_MOUSEWHEEL = 0x400 + 3;
const SDL_JOYAXISMOTION = 0x600;
const SDL_JOYBALLMOTION = 0x600 + 1;
const SDL_JOYHATMOTION = 0x600 + 2;
const SDL_JOYBUTTONDOWN = 0x600 + 3;
const SDL_JOYBUTTONUP = 0x600 + 4;
const SDL_JOYDEVICEADDED = 0x600 + 5;
const SDL_JOYDEVICEREMOVED = 0x600 + 6;
const SDL_CONTROLLERAXISMOTION = 0x650;
const SDL_CONTROLLERBUTTONDOWN = 0x650 + 1;
const SDL_CONTROLLERBUTTONUP = 0x650 + 2;
const SDL_CONTROLLERDEVICEADDED = 0x650 + 3;
const SDL_CONTROLLERDEVICEREMOVED = 0x650 + 4;
const SDL_CONTROLLERDEVICEREMAPPED = 0x650 + 5;
const SDL_FINGERDOWN = 0x700;
const SDL_FINGERUP = 0x700 + 1;
const SDL_FINGERMOTION = 0x700 + 2;
const SDL_DOLLARGESTURE = 0x800;
const SDL_DOLLARRECORD = 0x800 + 1;
const SDL_MULTIGESTURE = 0x800 + 2;
const SDL_CLIPBOARDUPDATE = 0x900;
const SDL_DROPFILE = 0x1000;
const SDL_USEREVENT = 0x8000;
const SDL_LASTEVENT = 0xFFFF;
const SDL_TEXTEDITINGEVENT_TEXT_SIZE = (32);
const SDL_TEXTINPUTEVENT_TEXT_SIZE = (32);
const SDL_ADDEVENT = 0;
const SDL_PEEKEVENT = 1;
const SDL_GETEVENT = 2;
const SDL_QUERY = -1;
const SDL_IGNORE = 0;
const SDL_DISABLE = 0;
const SDL_ENABLE = 1;
//const SDL_GetEventState = (type) SDL_EventState(type, SDL_QUERY);
//const _SDL_gamecontroller_h = ;
const SDL_CONTROLLER_BINDTYPE_NONE = 0;
const SDL_CONTROLLER_BINDTYPE_BUTTON = 0 + 1;
const SDL_CONTROLLER_BINDTYPE_AXIS = 0 + 2;
const SDL_CONTROLLER_BINDTYPE_HAT = 0 + 3;
const SDL_CONTROLLER_AXIS_INVALID = -1;
const SDL_CONTROLLER_AXIS_LEFTX = -1 + 1;
const SDL_CONTROLLER_AXIS_LEFTY = -1 + 2;
const SDL_CONTROLLER_AXIS_RIGHTX = -1 + 3;
const SDL_CONTROLLER_AXIS_RIGHTY = -1 + 4;
const SDL_CONTROLLER_AXIS_TRIGGERLEFT = -1 + 5;
const SDL_CONTROLLER_AXIS_TRIGGERRIGHT = -1 + 6;
const SDL_CONTROLLER_AXIS_MAX = -1 + 7;
const SDL_CONTROLLER_BUTTON_INVALID = -1;
const SDL_CONTROLLER_BUTTON_A = -1 + 1;
const SDL_CONTROLLER_BUTTON_B = -1 + 2;
const SDL_CONTROLLER_BUTTON_X = -1 + 3;
const SDL_CONTROLLER_BUTTON_Y = -1 + 4;
const SDL_CONTROLLER_BUTTON_BACK = -1 + 5;
const SDL_CONTROLLER_BUTTON_GUIDE = -1 + 6;
const SDL_CONTROLLER_BUTTON_START = -1 + 7;
const SDL_CONTROLLER_BUTTON_LEFTSTICK = -1 + 8;
const SDL_CONTROLLER_BUTTON_RIGHTSTICK = -1 + 9;
const SDL_CONTROLLER_BUTTON_LEFTSHOULDER = -1 + 10;
const SDL_CONTROLLER_BUTTON_RIGHTSHOULDER = -1 + 11;
const SDL_CONTROLLER_BUTTON_DPAD_UP = -1 + 12;
const SDL_CONTROLLER_BUTTON_DPAD_DOWN = -1 + 13;
const SDL_CONTROLLER_BUTTON_DPAD_LEFT = -1 + 14;
const SDL_CONTROLLER_BUTTON_DPAD_RIGHT = -1 + 15;
const SDL_CONTROLLER_BUTTON_MAX = -1 + 16;
//const _SDL_gesture_h = ;
//const _SDL_haptic_h = ;
const SDL_HAPTIC_CONSTANT = (1<<0);
const SDL_HAPTIC_SINE = (1<<1);
const SDL_HAPTIC_LEFTRIGHT = (1<<2);
const SDL_HAPTIC_TRIANGLE = (1<<3);
const SDL_HAPTIC_SAWTOOTHUP = (1<<4);
const SDL_HAPTIC_SAWTOOTHDOWN = (1<<5);
const SDL_HAPTIC_RAMP = (1<<6);
const SDL_HAPTIC_SPRING = (1<<7);
const SDL_HAPTIC_DAMPER = (1<<8);
const SDL_HAPTIC_INERTIA = (1<<9);
const SDL_HAPTIC_FRICTION = (1<<10);
const SDL_HAPTIC_CUSTOM = (1<<11);
const SDL_HAPTIC_GAIN = (1<<12);
const SDL_HAPTIC_AUTOCENTER = (1<<13);
const SDL_HAPTIC_STATUS = (1<<14);
const SDL_HAPTIC_PAUSE = (1<<15);
const SDL_HAPTIC_POLAR = 0;
const SDL_HAPTIC_CARTESIAN = 1;
const SDL_HAPTIC_SPHERICAL = 2;
//const SDL_HAPTIC_INFINITY = 4294967295U;
//const _SDL_hints_h = ;
const SDL_HINT_FRAMEBUFFER_ACCELERATION = 'SDL_FRAMEBUFFER_ACCELERATION';
const SDL_HINT_RENDER_DRIVER = 'SDL_RENDER_DRIVER';
const SDL_HINT_RENDER_OPENGL_SHADERS = 'SDL_RENDER_OPENGL_SHADERS';
const SDL_HINT_RENDER_SCALE_QUALITY = 'SDL_RENDER_SCALE_QUALITY';
const SDL_HINT_RENDER_VSYNC = 'SDL_RENDER_VSYNC';
const SDL_HINT_VIDEO_X11_XVIDMODE = 'SDL_VIDEO_X11_XVIDMODE';
const SDL_HINT_VIDEO_X11_XINERAMA = 'SDL_VIDEO_X11_XINERAMA';
const SDL_HINT_VIDEO_X11_XRANDR = 'SDL_VIDEO_X11_XRANDR';
const SDL_HINT_GRAB_KEYBOARD = 'SDL_GRAB_KEYBOARD';
const SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = 'SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS';
const SDL_HINT_IDLE_TIMER_DISABLED = 'SDL_IOS_IDLE_TIMER_DISABLED';
const SDL_HINT_ORIENTATIONS = 'SDL_IOS_ORIENTATIONS';
const SDL_HINT_XINPUT_ENABLED = 'SDL_XINPUT_ENABLED';
const SDL_HINT_GAMECONTROLLERCONFIG = 'SDL_GAMECONTROLLERCONFIG';
const SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = 'SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS';
const SDL_HINT_ALLOW_TOPMOST = 'SDL_ALLOW_TOPMOST';
const SDL_HINT_TIMER_RESOLUTION = 'SDL_TIMER_RESOLUTION';
const SDL_HINT_DEFAULT = 0;
const SDL_HINT_NORMAL = 1;
const SDL_HINT_OVERRIDE = 2;
//const _SDL_joystick_h = ;
const SDL_HAT_CENTERED = 0x00;
const SDL_HAT_UP = 0x01;
const SDL_HAT_RIGHT = 0x02;
const SDL_HAT_DOWN = 0x04;
const SDL_HAT_LEFT = 0x08;
const SDL_HAT_RIGHTUP = (SDL_HAT_RIGHT|SDL_HAT_UP);
const SDL_HAT_RIGHTDOWN = (SDL_HAT_RIGHT|SDL_HAT_DOWN);
const SDL_HAT_LEFTUP = (SDL_HAT_LEFT|SDL_HAT_UP);
const SDL_HAT_LEFTDOWN = (SDL_HAT_LEFT|SDL_HAT_DOWN);
//const _SDL_keyboard_h = ;
//const _SDL_keycode_h = ;
const SDLK_SCANCODE_MASK = (1<<30);
//const SDL_SCANCODE_TO_KEYCODE = (X) (X | SDLK_SCANCODE_MASK);
const SDLK_UNKNOWN = 0;
const SDLK_RETURN = '\r';
const SDLK_ESCAPE = '\033';
const SDLK_BACKSPACE = '\b';
const SDLK_TAB = '\t';
const SDLK_SPACE = ' ';
const SDLK_EXCLAIM = '!';
const SDLK_QUOTEDBL = '"';
const SDLK_HASH = '#';
const SDLK_PERCENT = '%';
const SDLK_DOLLAR = '\$';
const SDLK_AMPERSAND = '&';
const SDLK_QUOTE = '\'';
const SDLK_LEFTPAREN = '(';
const SDLK_RIGHTPAREN = ')';
const SDLK_ASTERISK = '*';
const SDLK_PLUS = '+';
const SDLK_COMMA = ',';
const SDLK_MINUS = '-';
const SDLK_PERIOD = '.';
const SDLK_SLASH = '/';
const SDLK_0 = '0';
const SDLK_1 = '1';
const SDLK_2 = '2';
const SDLK_3 = '3';
const SDLK_4 = '4';
const SDLK_5 = '5';
const SDLK_6 = '6';
const SDLK_7 = '7';
const SDLK_8 = '8';
const SDLK_9 = '9';
const SDLK_COLON = ':';
const SDLK_SEMICOLON = ';';
const SDLK_LESS = '<';
const SDLK_EQUALS = '=';
const SDLK_GREATER = '>';
const SDLK_QUESTION = '?';
const SDLK_AT = '@';
const SDLK_LEFTBRACKET = '[';
const SDLK_BACKSLASH = '\\';
const SDLK_RIGHTBRACKET = ']';
const SDLK_CARET = '^';
const SDLK_UNDERSCORE = '_';
const SDLK_BACKQUOTE = '`';
const SDLK_a = 'a';
const SDLK_b = 'b';
const SDLK_c = 'c';
const SDLK_d = 'd';
const SDLK_e = 'e';
const SDLK_f = 'f';
const SDLK_g = 'g';
const SDLK_h = 'h';
const SDLK_i = 'i';
const SDLK_j = 'j';
const SDLK_k = 'k';
const SDLK_l = 'l';
const SDLK_m = 'm';
const SDLK_n = 'n';
const SDLK_o = 'o';
const SDLK_p = 'p';
const SDLK_q = 'q';
const SDLK_r = 'r';
const SDLK_s = 's';
const SDLK_t = 't';
const SDLK_u = 'u';
const SDLK_v = 'v';
const SDLK_w = 'w';
const SDLK_x = 'x';
const SDLK_y = 'y';
const SDLK_z = 'z';
//const SDLK_CAPSLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK);
//const SDLK_F1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1);
//const SDLK_F2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2);
//const SDLK_F3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3);
//const SDLK_F4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4);
//const SDLK_F5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5);
//const SDLK_F6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6);
//const SDLK_F7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7);
//const SDLK_F8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8);
//const SDLK_F9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9);
//const SDLK_F10 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10);
//const SDLK_F11 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11);
//const SDLK_F12 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12);
//const SDLK_PRINTSCREEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN);
//const SDLK_SCROLLLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK);
//const SDLK_PAUSE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE);
//const SDLK_INSERT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT);
//const SDLK_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME);
//const SDLK_PAGEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP);
const SDLK_DELETE = '\177';
//const SDLK_END = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END);
//const SDLK_PAGEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN);
//const SDLK_RIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT);
//const SDLK_LEFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT);
//const SDLK_DOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN);
//const SDLK_UP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP);
//const SDLK_NUMLOCKCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR);
//const SDLK_KP_DIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE);
//const SDLK_KP_MULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY);
//const SDLK_KP_MINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS);
//const SDLK_KP_PLUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS);
//const SDLK_KP_ENTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER);
//const SDLK_KP_1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1);
//const SDLK_KP_2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2);
//const SDLK_KP_3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3);
//const SDLK_KP_4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4);
//const SDLK_KP_5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5);
//const SDLK_KP_6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6);
//const SDLK_KP_7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7);
//const SDLK_KP_8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8);
//const SDLK_KP_9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9);
//const SDLK_KP_0 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0);
//const SDLK_KP_PERIOD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD);
//const SDLK_APPLICATION = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION);
//const SDLK_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER);
//const SDLK_KP_EQUALS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS);
//const SDLK_F13 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13);
//const SDLK_F14 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14);
//const SDLK_F15 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15);
//const SDLK_F16 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16);
//const SDLK_F17 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17);
//const SDLK_F18 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18);
//const SDLK_F19 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19);
//const SDLK_F20 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20);
//const SDLK_F21 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21);
//const SDLK_F22 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22);
//const SDLK_F23 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23);
//const SDLK_F24 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24);
//const SDLK_EXECUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE);
//const SDLK_HELP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP);
//const SDLK_MENU = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU);
//const SDLK_SELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT);
//const SDLK_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP);
//const SDLK_AGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN);
//const SDLK_UNDO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO);
//const SDLK_CUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT);
//const SDLK_COPY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY);
//const SDLK_PASTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE);
//const SDLK_FIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND);
//const SDLK_MUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE);
//const SDLK_VOLUMEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP);
//const SDLK_VOLUMEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN);
//const SDLK_KP_COMMA = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA);
//const SDLK_KP_EQUALSAS400 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400);
//const SDLK_ALTERASE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE);
//const SDLK_SYSREQ = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ);
//const SDLK_CANCEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL);
//const SDLK_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR);
//const SDLK_PRIOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR);
//const SDLK_RETURN2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2);
//const SDLK_SEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR);
//const SDLK_OUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT);
//const SDLK_OPER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER);
//const SDLK_CLEARAGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN);
//const SDLK_CRSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL);
//const SDLK_EXSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL);
//const SDLK_KP_00 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00);
//const SDLK_KP_000 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000);
//const SDLK_THOUSANDSSEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR);
//const SDLK_DECIMALSEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR);
//const SDLK_CURRENCYUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT);
//const SDLK_CURRENCYSUBUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT);
//const SDLK_KP_LEFTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN);
//const SDLK_KP_RIGHTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN);
//const SDLK_KP_LEFTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE);
//const SDLK_KP_RIGHTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE);
//const SDLK_KP_TAB = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB);
//const SDLK_KP_BACKSPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE);
//const SDLK_KP_A = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A);
//const SDLK_KP_B = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B);
//const SDLK_KP_C = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C);
//const SDLK_KP_D = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D);
//const SDLK_KP_E = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E);
//const SDLK_KP_F = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F);
//const SDLK_KP_XOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR);
//const SDLK_KP_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER);
//const SDLK_KP_PERCENT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT);
//const SDLK_KP_LESS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS);
//const SDLK_KP_GREATER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER);
//const SDLK_KP_AMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND);
//const SDLK_KP_DBLAMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND);
//const SDLK_KP_VERTICALBAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR);
//const SDLK_KP_DBLVERTICALBAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR);
//const SDLK_KP_COLON = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON);
//const SDLK_KP_HASH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH);
//const SDLK_KP_SPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE);
//const SDLK_KP_AT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT);
//const SDLK_KP_EXCLAM = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM);
//const SDLK_KP_MEMSTORE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE);
//const SDLK_KP_MEMRECALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL);
//const SDLK_KP_MEMCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR);
//const SDLK_KP_MEMADD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD);
//const SDLK_KP_MEMSUBTRACT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT);
//const SDLK_KP_MEMMULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY);
//const SDLK_KP_MEMDIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE);
//const SDLK_KP_PLUSMINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS);
//const SDLK_KP_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR);
//const SDLK_KP_CLEARENTRY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY);
//const SDLK_KP_BINARY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY);
//const SDLK_KP_OCTAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL);
//const SDLK_KP_DECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL);
//const SDLK_KP_HEXADECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL);
//const SDLK_LCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL);
//const SDLK_LSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT);
//const SDLK_LALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT);
//const SDLK_LGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI);
//const SDLK_RCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL);
//const SDLK_RSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT);
//const SDLK_RALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT);
//const SDLK_RGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI);
//const SDLK_MODE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE);
//const SDLK_AUDIONEXT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT);
//const SDLK_AUDIOPREV = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV);
//const SDLK_AUDIOSTOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP);
//const SDLK_AUDIOPLAY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY);
//const SDLK_AUDIOMUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE);
//const SDLK_MEDIASELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT);
//const SDLK_WWW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW);
//const SDLK_MAIL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL);
//const SDLK_CALCULATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR);
//const SDLK_COMPUTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER);
//const SDLK_AC_SEARCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH);
//const SDLK_AC_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME);
//const SDLK_AC_BACK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK);
//const SDLK_AC_FORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD);
//const SDLK_AC_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP);
//const SDLK_AC_REFRESH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH);
//const SDLK_AC_BOOKMARKS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS);
//const SDLK_BRIGHTNESSDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN);
//const SDLK_BRIGHTNESSUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP);
//const SDLK_DISPLAYSWITCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH);
//const SDLK_KBDILLUMTOGGLE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE);
//const SDLK_KBDILLUMDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN);
//const SDLK_KBDILLUMUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP);
//const SDLK_EJECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT);
//const SDLK_SLEEP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP);
const KMOD_NONE = 0x0000;
const KMOD_LSHIFT = 0x0001;
const KMOD_RSHIFT = 0x0002;
const KMOD_LCTRL = 0x0040;
const KMOD_RCTRL = 0x0080;
const KMOD_LALT = 0x0100;
const KMOD_RALT = 0x0200;
const KMOD_LGUI = 0x0400;
const KMOD_RGUI = 0x0800;
const KMOD_NUM = 0x1000;
const KMOD_CAPS = 0x2000;
const KMOD_MODE = 0x4000;
const KMOD_RESERVED = 0x8000;
const KMOD_CTRL = (KMOD_LCTRL|KMOD_RCTRL);
const KMOD_SHIFT = (KMOD_LSHIFT|KMOD_RSHIFT);
const KMOD_ALT = (KMOD_LALT|KMOD_RALT);
const KMOD_GUI = (KMOD_LGUI|KMOD_RGUI);
//const _SDL_loadso_h = ;
//const _SDL_log_h = ;
const SDL_MAX_LOG_MESSAGE = 4096;
const SDL_LOG_CATEGORY_APPLICATION = 0;
const SDL_LOG_CATEGORY_ERROR = 1;
const SDL_LOG_CATEGORY_ASSERT = 2;
const SDL_LOG_CATEGORY_SYSTEM = 3;
const SDL_LOG_CATEGORY_AUDIO = 4;
const SDL_LOG_CATEGORY_VIDEO = 5;
const SDL_LOG_CATEGORY_RENDER = 6;
const SDL_LOG_CATEGORY_INPUT = 7;
const SDL_LOG_CATEGORY_TEST = 8;
const SDL_LOG_CATEGORY_RESERVED1 = 9;
const SDL_LOG_CATEGORY_RESERVED2 = 10;
const SDL_LOG_CATEGORY_RESERVED3 = 11;
const SDL_LOG_CATEGORY_RESERVED4 = 12;
const SDL_LOG_CATEGORY_RESERVED5 = 13;
const SDL_LOG_CATEGORY_RESERVED6 = 14;
const SDL_LOG_CATEGORY_RESERVED7 = 15;
const SDL_LOG_CATEGORY_RESERVED8 = 16;
const SDL_LOG_CATEGORY_RESERVED9 = 17;
const SDL_LOG_CATEGORY_RESERVED10 = 18;
const SDL_LOG_CATEGORY_CUSTOM = 19;
const SDL_LOG_PRIORITY_VERBOSE = 1;
const SDL_LOG_PRIORITY_DEBUG = 1 + 1;
const SDL_LOG_PRIORITY_INFO = 1 + 2;
const SDL_LOG_PRIORITY_WARN = 1 + 3;
const SDL_LOG_PRIORITY_ERROR = 1 + 4;
const SDL_LOG_PRIORITY_CRITICAL = 1 + 5;
const SDL_NUM_LOG_PRIORITIES = 1 + 6;
//const _SDL_main_h = ;
//const SDL_MAIN_AVAILABLE = ;
//const SDL_MAIN_NEEDED = ;
const C_LINKAGE = 'C';
//const main = SDL_main;
//const _SDL_messagebox_h = ;
const SDL_MESSAGEBOX_ERROR = 0x00000010;
const SDL_MESSAGEBOX_WARNING = 0x00000020;
const SDL_MESSAGEBOX_INFORMATION = 0x00000040;
const SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001;
const SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002;
const SDL_MESSAGEBOX_COLOR_BACKGROUND = 0;
const SDL_MESSAGEBOX_COLOR_TEXT = 1;
const SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2;
const SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3;
const SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4;
const SDL_MESSAGEBOX_COLOR_MAX = 5;
//const _SDL_mouse_h = ;
const SDL_SYSTEM_CURSOR_ARROW = 0;
const SDL_SYSTEM_CURSOR_IBEAM = 1;
const SDL_SYSTEM_CURSOR_WAIT = 2;
const SDL_SYSTEM_CURSOR_CROSSHAIR = 3;
const SDL_SYSTEM_CURSOR_WAITARROW = 4;
const SDL_SYSTEM_CURSOR_SIZENWSE = 5;
const SDL_SYSTEM_CURSOR_SIZENESW = 6;
const SDL_SYSTEM_CURSOR_SIZEWE = 7;
const SDL_SYSTEM_CURSOR_SIZENS = 8;
const SDL_SYSTEM_CURSOR_SIZEALL = 9;
const SDL_SYSTEM_CURSOR_NO = 10;
const SDL_SYSTEM_CURSOR_HAND = 11;
const SDL_NUM_SYSTEM_CURSORS = 12;
//const SDL_BUTTON = (X) (1 << ((X)-1));
const SDL_BUTTON_LEFT = 1;
const SDL_BUTTON_MIDDLE = 2;
const SDL_BUTTON_RIGHT = 3;
const SDL_BUTTON_X1 = 4;
const SDL_BUTTON_X2 = 5;
//const SDL_BUTTON_LMASK = SDL_BUTTON(SDL_BUTTON_LEFT);
//const SDL_BUTTON_MMASK = SDL_BUTTON(SDL_BUTTON_MIDDLE);
//const SDL_BUTTON_RMASK = SDL_BUTTON(SDL_BUTTON_RIGHT);
//const SDL_BUTTON_X1MASK = SDL_BUTTON(SDL_BUTTON_X1);
//const SDL_BUTTON_X2MASK = SDL_BUTTON(SDL_BUTTON_X2);
//const _SDL_mutex_h = ;
const SDL_MUTEX_TIMEDOUT = 1;
//const SDL_MUTEX_MAXWAIT = (~(Uint32)0);
//const SDL_mutexP = (m) SDL_LockMutex(m);
//const SDL_mutexV = (m) SDL_UnlockMutex(m);
//const _SDLname_h_ = ;
const NeedFunctionPrototypes = 1;
//const SDL_NAME = (X) SDL_##X;
//const APIENTRY = ;
//const _SDL_pixels_h = ;
const SDL_ALPHA_OPAQUE = 255;
const SDL_ALPHA_TRANSPARENT = 0;
const SDL_PIXELTYPE_UNKNOWN = 0;
const SDL_PIXELTYPE_INDEX1 = 1;
const SDL_PIXELTYPE_INDEX4 = 2;
const SDL_PIXELTYPE_INDEX8 = 3;
const SDL_PIXELTYPE_PACKED8 = 4;
const SDL_PIXELTYPE_PACKED16 = 5;
const SDL_PIXELTYPE_PACKED32 = 6;
const SDL_PIXELTYPE_ARRAYU8 = 7;
const SDL_PIXELTYPE_ARRAYU16 = 8;
const SDL_PIXELTYPE_ARRAYU32 = 9;
const SDL_PIXELTYPE_ARRAYF16 = 10;
const SDL_PIXELTYPE_ARRAYF32 = 11;
const SDL_BITMAPORDER_NONE = 0;
const SDL_BITMAPORDER_4321 = 1;
const SDL_BITMAPORDER_1234 = 2;
const SDL_PACKEDORDER_NONE = 0;
const SDL_PACKEDORDER_XRGB = 1;
const SDL_PACKEDORDER_RGBX = 2;
const SDL_PACKEDORDER_ARGB = 3;
const SDL_PACKEDORDER_RGBA = 4;
const SDL_PACKEDORDER_XBGR = 5;
const SDL_PACKEDORDER_BGRX = 6;
const SDL_PACKEDORDER_ABGR = 7;
const SDL_PACKEDORDER_BGRA = 8;
const SDL_ARRAYORDER_NONE = 0;
const SDL_ARRAYORDER_RGB = 1;
const SDL_ARRAYORDER_RGBA = 2;
const SDL_ARRAYORDER_ARGB = 3;
const SDL_ARRAYORDER_BGR = 4;
const SDL_ARRAYORDER_BGRA = 5;
const SDL_ARRAYORDER_ABGR = 6;
const SDL_PACKEDLAYOUT_NONE = 0;
const SDL_PACKEDLAYOUT_332 = 1;
const SDL_PACKEDLAYOUT_4444 = 2;
const SDL_PACKEDLAYOUT_1555 = 3;
const SDL_PACKEDLAYOUT_5551 = 4;
const SDL_PACKEDLAYOUT_565 = 5;
const SDL_PACKEDLAYOUT_8888 = 6;
const SDL_PACKEDLAYOUT_2101010 = 7;
const SDL_PACKEDLAYOUT_1010102 = 8;
//const SDL_DEFINE_PIXELFOURCC = (A, B, C, D) SDL_FOURCC(A, B, C, D);
//const SDL_DEFINE_PIXELFORMAT = (type, order, layout, bits, bytes) ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | ((bits) << 8) | ((bytes) << 0));
//const SDL_PIXELFLAG = (X) (((X) >> 28) & 0x0F);
//const SDL_PIXELTYPE = (X) (((X) >> 24) & 0x0F);
//const SDL_PIXELORDER = (X) (((X) >> 20) & 0x0F);
//const SDL_PIXELLAYOUT = (X) (((X) >> 16) & 0x0F);
//const SDL_BITSPERPIXEL = (X) (((X) >> 8) & 0xFF);
//const SDL_BYTESPERPIXEL = (X) (SDL_ISPIXELFORMAT_FOURCC(X) ? ((((X) == SDL_PIXELFORMAT_YUY2) || ((X) == SDL_PIXELFORMAT_UYVY) || ((X) == SDL_PIXELFORMAT_YVYU)) ? 2 : 1) : (((X) >> 0) & 0xFF));
//const SDL_ISPIXELFORMAT_INDEXED = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)));
//const SDL_ISPIXELFORMAT_ALPHA = (format) (!SDL_ISPIXELFORMAT_FOURCC(format) && ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA)));
//const SDL_ISPIXELFORMAT_FOURCC = (format) ((format) && (SDL_PIXELFLAG(format) != 1));
const SDL_PIXELFORMAT_UNKNOWN = 0;
//const SDL_PIXELFORMAT_INDEX1LSB = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0);
//const SDL_PIXELFORMAT_INDEX1MSB = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0);
//const SDL_PIXELFORMAT_INDEX4LSB = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0);
//const SDL_PIXELFORMAT_INDEX4MSB = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0);
//const SDL_PIXELFORMAT_INDEX8 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1);
//const SDL_PIXELFORMAT_RGB332 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1);
//const SDL_PIXELFORMAT_RGB444 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2);
//const SDL_PIXELFORMAT_RGB555 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2);
//const SDL_PIXELFORMAT_BGR555 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2);
//const SDL_PIXELFORMAT_ARGB4444 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2);
//const SDL_PIXELFORMAT_RGBA4444 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2);
//const SDL_PIXELFORMAT_ABGR4444 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2);
//const SDL_PIXELFORMAT_BGRA4444 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2);
//const SDL_PIXELFORMAT_ARGB1555 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2);
//const SDL_PIXELFORMAT_RGBA5551 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2);
//const SDL_PIXELFORMAT_ABGR1555 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2);
//const SDL_PIXELFORMAT_BGRA5551 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2);
//const SDL_PIXELFORMAT_RGB565 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2);
//const SDL_PIXELFORMAT_BGR565 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2);
//const SDL_PIXELFORMAT_RGB24 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3);
//const SDL_PIXELFORMAT_BGR24 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3);
//const SDL_PIXELFORMAT_RGB888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4);
//const SDL_PIXELFORMAT_RGBX8888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4);
//const SDL_PIXELFORMAT_BGR888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4);
//const SDL_PIXELFORMAT_BGRX8888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4);
//const SDL_PIXELFORMAT_ARGB8888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4);
//const SDL_PIXELFORMAT_RGBA8888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4);
//const SDL_PIXELFORMAT_ABGR8888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4);
//const SDL_PIXELFORMAT_BGRA8888 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4);
//const SDL_PIXELFORMAT_ARGB2101010 = SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4);
//const SDL_PIXELFORMAT_YV12 = SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2');
//const SDL_PIXELFORMAT_IYUV = SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V');
//const SDL_PIXELFORMAT_YUY2 = SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2');
//const SDL_PIXELFORMAT_UYVY = SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y');
//const SDL_PIXELFORMAT_YVYU = SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U');
//const SDL_Colour = SDL_Color;
//const _SDL_platform_h = ;
//const __AIX__ = 1;
//const __BEOS__ = 1;
//const __HAIKU__ = 1;
//const __BSDI__ = 1;
//const __DREAMCAST__ = 1;
//const __FREEBSD__ = 1;
//const __HPUX__ = 1;
//const __IRIX__ = 1;
//const __LINUX__ = 1;
//const __ANDROID__ = 1;
//const __IPHONEOS__ = 1;
//const __MACOSX__ = 1;
//const __NETBSD__ = 1;
//const __OPENBSD__ = 1;
//const __OS2__ = 1;
//const __OSF__ = 1;
//const __QNXNTO__ = 1;
//const __RISCOS__ = 1;
//const __SOLARIS__ = 1;
//const __WIN32__ = 1;
//const __PSP__ = 1;
//const _SDL_power_h = ;
const SDL_POWERSTATE_UNKNOWN = 0;
const SDL_POWERSTATE_ON_BATTERY = 1;
const SDL_POWERSTATE_NO_BATTERY = 2;
const SDL_POWERSTATE_CHARGING = 3;
const SDL_POWERSTATE_CHARGED = 4;
//const _SDL_quit_h = ;
//const SDL_QuitRequested = () (SDL_PumpEvents(), (SDL_PeepEvents(NULL,0,SDL_PEEKEVENT,SDL_QUIT,SDL_QUIT) > 0));
//const _SDL_rect_h = ;
//const _SDL_render_h = ;
const SDL_RENDERER_SOFTWARE = 0x00000001;
const SDL_RENDERER_ACCELERATED = 0x00000002;
const SDL_RENDERER_PRESENTVSYNC = 0x00000004;
const SDL_RENDERER_TARGETTEXTURE = 0x00000008;
const SDL_TEXTUREACCESS_STATIC = 0;
const SDL_TEXTUREACCESS_STREAMING = 1;
const SDL_TEXTUREACCESS_TARGET = 2;
const SDL_TEXTUREMODULATE_NONE = 0x00000000;
const SDL_TEXTUREMODULATE_COLOR = 0x00000001;
const SDL_TEXTUREMODULATE_ALPHA = 0x00000002;
const SDL_FLIP_NONE = 0x00000000;
const SDL_FLIP_HORIZONTAL = 0x00000001;
const SDL_FLIP_VERTICAL = 0x00000002;
const SDL_REVISION = 'hg-7633:d6a8fa507a45';
const SDL_REVISION_NUMBER = 7633;
//const _SDL_rwops_h = ;
const SDL_RWOPS_UNKNOWN = 0;
const SDL_RWOPS_WINFILE = 1;
const SDL_RWOPS_STDFILE = 2;
const SDL_RWOPS_JNIFILE = 3;
const SDL_RWOPS_MEMORY = 4;
const SDL_RWOPS_MEMORY_RO = 5;
const RW_SEEK_SET = 0;
const RW_SEEK_CUR = 1;
const RW_SEEK_END = 2;
//const SDL_RWsize = (ctx) (ctx)->size(ctx);
//const SDL_RWseek = (ctx, offset, whence) (ctx)->seek(ctx, offset, whence);
//const SDL_RWtell = (ctx) (ctx)->seek(ctx, 0, RW_SEEK_CUR);
//const SDL_RWread = (ctx, ptr, size, n) (ctx)->read(ctx, ptr, size, n);
//const SDL_RWwrite = (ctx, ptr, size, n) (ctx)->write(ctx, ptr, size, n);
//const SDL_RWclose = (ctx) (ctx)->close(ctx);
//const _SDL_scancode_h = ;
const SDL_SCANCODE_UNKNOWN = 0;
const SDL_SCANCODE_A = 4;
const SDL_SCANCODE_B = 5;
const SDL_SCANCODE_C = 6;
const SDL_SCANCODE_D = 7;
const SDL_SCANCODE_E = 8;
const SDL_SCANCODE_F = 9;
const SDL_SCANCODE_G = 10;
const SDL_SCANCODE_H = 11;
const SDL_SCANCODE_I = 12;
const SDL_SCANCODE_J = 13;
const SDL_SCANCODE_K = 14;
const SDL_SCANCODE_L = 15;
const SDL_SCANCODE_M = 16;
const SDL_SCANCODE_N = 17;
const SDL_SCANCODE_O = 18;
const SDL_SCANCODE_P = 19;
const SDL_SCANCODE_Q = 20;
const SDL_SCANCODE_R = 21;
const SDL_SCANCODE_S = 22;
const SDL_SCANCODE_T = 23;
const SDL_SCANCODE_U = 24;
const SDL_SCANCODE_V = 25;
const SDL_SCANCODE_W = 26;
const SDL_SCANCODE_X = 27;
const SDL_SCANCODE_Y = 28;
const SDL_SCANCODE_Z = 29;
const SDL_SCANCODE_1 = 30;
const SDL_SCANCODE_2 = 31;
const SDL_SCANCODE_3 = 32;
const SDL_SCANCODE_4 = 33;
const SDL_SCANCODE_5 = 34;
const SDL_SCANCODE_6 = 35;
const SDL_SCANCODE_7 = 36;
const SDL_SCANCODE_8 = 37;
const SDL_SCANCODE_9 = 38;
const SDL_SCANCODE_0 = 39;
const SDL_SCANCODE_RETURN = 40;
const SDL_SCANCODE_ESCAPE = 41;
const SDL_SCANCODE_BACKSPACE = 42;
const SDL_SCANCODE_TAB = 43;
const SDL_SCANCODE_SPACE = 44;
const SDL_SCANCODE_MINUS = 45;
const SDL_SCANCODE_EQUALS = 46;
const SDL_SCANCODE_LEFTBRACKET = 47;
const SDL_SCANCODE_RIGHTBRACKET = 48;
const SDL_SCANCODE_BACKSLASH = 49;
const SDL_SCANCODE_NONUSHASH = 50;
const SDL_SCANCODE_SEMICOLON = 51;
const SDL_SCANCODE_APOSTROPHE = 52;
const SDL_SCANCODE_GRAVE = 53;
const SDL_SCANCODE_COMMA = 54;
const SDL_SCANCODE_PERIOD = 55;
const SDL_SCANCODE_SLASH = 56;
const SDL_SCANCODE_CAPSLOCK = 57;
const SDL_SCANCODE_F1 = 58;
const SDL_SCANCODE_F2 = 59;
const SDL_SCANCODE_F3 = 60;
const SDL_SCANCODE_F4 = 61;
const SDL_SCANCODE_F5 = 62;
const SDL_SCANCODE_F6 = 63;
const SDL_SCANCODE_F7 = 64;
const SDL_SCANCODE_F8 = 65;
const SDL_SCANCODE_F9 = 66;
const SDL_SCANCODE_F10 = 67;
const SDL_SCANCODE_F11 = 68;
const SDL_SCANCODE_F12 = 69;
const SDL_SCANCODE_PRINTSCREEN = 70;
const SDL_SCANCODE_SCROLLLOCK = 71;
const SDL_SCANCODE_PAUSE = 72;
const SDL_SCANCODE_INSERT = 73;
const SDL_SCANCODE_HOME = 74;
const SDL_SCANCODE_PAGEUP = 75;
const SDL_SCANCODE_DELETE = 76;
const SDL_SCANCODE_END = 77;
const SDL_SCANCODE_PAGEDOWN = 78;
const SDL_SCANCODE_RIGHT = 79;
const SDL_SCANCODE_LEFT = 80;
const SDL_SCANCODE_DOWN = 81;
const SDL_SCANCODE_UP = 82;
const SDL_SCANCODE_NUMLOCKCLEAR = 83;
const SDL_SCANCODE_KP_DIVIDE = 84;
const SDL_SCANCODE_KP_MULTIPLY = 85;
const SDL_SCANCODE_KP_MINUS = 86;
const SDL_SCANCODE_KP_PLUS = 87;
const SDL_SCANCODE_KP_ENTER = 88;
const SDL_SCANCODE_KP_1 = 89;
const SDL_SCANCODE_KP_2 = 90;
const SDL_SCANCODE_KP_3 = 91;
const SDL_SCANCODE_KP_4 = 92;
const SDL_SCANCODE_KP_5 = 93;
const SDL_SCANCODE_KP_6 = 94;
const SDL_SCANCODE_KP_7 = 95;
const SDL_SCANCODE_KP_8 = 96;
const SDL_SCANCODE_KP_9 = 97;
const SDL_SCANCODE_KP_0 = 98;
const SDL_SCANCODE_KP_PERIOD = 99;
const SDL_SCANCODE_NONUSBACKSLASH = 100;
const SDL_SCANCODE_APPLICATION = 101;
const SDL_SCANCODE_POWER = 102;
const SDL_SCANCODE_KP_EQUALS = 103;
const SDL_SCANCODE_F13 = 104;
const SDL_SCANCODE_F14 = 105;
const SDL_SCANCODE_F15 = 106;
const SDL_SCANCODE_F16 = 107;
const SDL_SCANCODE_F17 = 108;
const SDL_SCANCODE_F18 = 109;
const SDL_SCANCODE_F19 = 110;
const SDL_SCANCODE_F20 = 111;
const SDL_SCANCODE_F21 = 112;
const SDL_SCANCODE_F22 = 113;
const SDL_SCANCODE_F23 = 114;
const SDL_SCANCODE_F24 = 115;
const SDL_SCANCODE_EXECUTE = 116;
const SDL_SCANCODE_HELP = 117;
const SDL_SCANCODE_MENU = 118;
const SDL_SCANCODE_SELECT = 119;
const SDL_SCANCODE_STOP = 120;
const SDL_SCANCODE_AGAIN = 121;
const SDL_SCANCODE_UNDO = 122;
const SDL_SCANCODE_CUT = 123;
const SDL_SCANCODE_COPY = 124;
const SDL_SCANCODE_PASTE = 125;
const SDL_SCANCODE_FIND = 126;
const SDL_SCANCODE_MUTE = 127;
const SDL_SCANCODE_VOLUMEUP = 128;
const SDL_SCANCODE_VOLUMEDOWN = 129;
const SDL_SCANCODE_KP_COMMA = 133;
const SDL_SCANCODE_KP_EQUALSAS400 = 134;
const SDL_SCANCODE_INTERNATIONAL1 = 135;
const SDL_SCANCODE_INTERNATIONAL2 = 136;
const SDL_SCANCODE_INTERNATIONAL3 = 137;
const SDL_SCANCODE_INTERNATIONAL4 = 138;
const SDL_SCANCODE_INTERNATIONAL5 = 139;
const SDL_SCANCODE_INTERNATIONAL6 = 140;
const SDL_SCANCODE_INTERNATIONAL7 = 141;
const SDL_SCANCODE_INTERNATIONAL8 = 142;
const SDL_SCANCODE_INTERNATIONAL9 = 143;
const SDL_SCANCODE_LANG1 = 144;
const SDL_SCANCODE_LANG2 = 145;
const SDL_SCANCODE_LANG3 = 146;
const SDL_SCANCODE_LANG4 = 147;
const SDL_SCANCODE_LANG5 = 148;
const SDL_SCANCODE_LANG6 = 149;
const SDL_SCANCODE_LANG7 = 150;
const SDL_SCANCODE_LANG8 = 151;
const SDL_SCANCODE_LANG9 = 152;
const SDL_SCANCODE_ALTERASE = 153;
const SDL_SCANCODE_SYSREQ = 154;
const SDL_SCANCODE_CANCEL = 155;
const SDL_SCANCODE_CLEAR = 156;
const SDL_SCANCODE_PRIOR = 157;
const SDL_SCANCODE_RETURN2 = 158;
const SDL_SCANCODE_SEPARATOR = 159;
const SDL_SCANCODE_OUT = 160;
const SDL_SCANCODE_OPER = 161;
const SDL_SCANCODE_CLEARAGAIN = 162;
const SDL_SCANCODE_CRSEL = 163;
const SDL_SCANCODE_EXSEL = 164;
const SDL_SCANCODE_KP_00 = 176;
const SDL_SCANCODE_KP_000 = 177;
const SDL_SCANCODE_THOUSANDSSEPARATOR = 178;
const SDL_SCANCODE_DECIMALSEPARATOR = 179;
const SDL_SCANCODE_CURRENCYUNIT = 180;
const SDL_SCANCODE_CURRENCYSUBUNIT = 181;
const SDL_SCANCODE_KP_LEFTPAREN = 182;
const SDL_SCANCODE_KP_RIGHTPAREN = 183;
const SDL_SCANCODE_KP_LEFTBRACE = 184;
const SDL_SCANCODE_KP_RIGHTBRACE = 185;
const SDL_SCANCODE_KP_TAB = 186;
const SDL_SCANCODE_KP_BACKSPACE = 187;
const SDL_SCANCODE_KP_A = 188;
const SDL_SCANCODE_KP_B = 189;
const SDL_SCANCODE_KP_C = 190;
const SDL_SCANCODE_KP_D = 191;
const SDL_SCANCODE_KP_E = 192;
const SDL_SCANCODE_KP_F = 193;
const SDL_SCANCODE_KP_XOR = 194;
const SDL_SCANCODE_KP_POWER = 195;
const SDL_SCANCODE_KP_PERCENT = 196;
const SDL_SCANCODE_KP_LESS = 197;
const SDL_SCANCODE_KP_GREATER = 198;
const SDL_SCANCODE_KP_AMPERSAND = 199;
const SDL_SCANCODE_KP_DBLAMPERSAND = 200;
const SDL_SCANCODE_KP_VERTICALBAR = 201;
const SDL_SCANCODE_KP_DBLVERTICALBAR = 202;
const SDL_SCANCODE_KP_COLON = 203;
const SDL_SCANCODE_KP_HASH = 204;
const SDL_SCANCODE_KP_SPACE = 205;
const SDL_SCANCODE_KP_AT = 206;
const SDL_SCANCODE_KP_EXCLAM = 207;
const SDL_SCANCODE_KP_MEMSTORE = 208;
const SDL_SCANCODE_KP_MEMRECALL = 209;
const SDL_SCANCODE_KP_MEMCLEAR = 210;
const SDL_SCANCODE_KP_MEMADD = 211;
const SDL_SCANCODE_KP_MEMSUBTRACT = 212;
const SDL_SCANCODE_KP_MEMMULTIPLY = 213;
const SDL_SCANCODE_KP_MEMDIVIDE = 214;
const SDL_SCANCODE_KP_PLUSMINUS = 215;
const SDL_SCANCODE_KP_CLEAR = 216;
const SDL_SCANCODE_KP_CLEARENTRY = 217;
const SDL_SCANCODE_KP_BINARY = 218;
const SDL_SCANCODE_KP_OCTAL = 219;
const SDL_SCANCODE_KP_DECIMAL = 220;
const SDL_SCANCODE_KP_HEXADECIMAL = 221;
const SDL_SCANCODE_LCTRL = 224;
const SDL_SCANCODE_LSHIFT = 225;
const SDL_SCANCODE_LALT = 226;
const SDL_SCANCODE_LGUI = 227;
const SDL_SCANCODE_RCTRL = 228;
const SDL_SCANCODE_RSHIFT = 229;
const SDL_SCANCODE_RALT = 230;
const SDL_SCANCODE_RGUI = 231;
const SDL_SCANCODE_MODE = 257;
const SDL_SCANCODE_AUDIONEXT = 258;
const SDL_SCANCODE_AUDIOPREV = 259;
const SDL_SCANCODE_AUDIOSTOP = 260;
const SDL_SCANCODE_AUDIOPLAY = 261;
const SDL_SCANCODE_AUDIOMUTE = 262;
const SDL_SCANCODE_MEDIASELECT = 263;
const SDL_SCANCODE_WWW = 264;
const SDL_SCANCODE_MAIL = 265;
const SDL_SCANCODE_CALCULATOR = 266;
const SDL_SCANCODE_COMPUTER = 267;
const SDL_SCANCODE_AC_SEARCH = 268;
const SDL_SCANCODE_AC_HOME = 269;
const SDL_SCANCODE_AC_BACK = 270;
const SDL_SCANCODE_AC_FORWARD = 271;
const SDL_SCANCODE_AC_STOP = 272;
const SDL_SCANCODE_AC_REFRESH = 273;
const SDL_SCANCODE_AC_BOOKMARKS = 274;
const SDL_SCANCODE_BRIGHTNESSDOWN = 275;
const SDL_SCANCODE_BRIGHTNESSUP = 276;
const SDL_SCANCODE_DISPLAYSWITCH = 277;
const SDL_SCANCODE_KBDILLUMTOGGLE = 278;
const SDL_SCANCODE_KBDILLUMDOWN = 279;
const SDL_SCANCODE_KBDILLUMUP = 280;
const SDL_SCANCODE_EJECT = 281;
const SDL_SCANCODE_SLEEP = 282;
const SDL_SCANCODE_APP1 = 283;
const SDL_SCANCODE_APP2 = 284;
const SDL_NUM_SCANCODES = 512;
//const _SDL_shape_h = ;
const SDL_NONSHAPEABLE_WINDOW = -1;
const SDL_INVALID_SHAPE_ARGUMENT = -2;
const SDL_WINDOW_LACKS_SHAPE = -3;
const ShapeModeDefault = 0;
const ShapeModeBinarizeAlpha = 1;
const ShapeModeReverseBinarizeAlpha = 2;
const ShapeModeColorKey = 3;
//const SDL_SHAPEMODEALPHA = (mode) (mode == ShapeModeDefault || mode == ShapeModeBinarizeAlpha || mode == ShapeModeReverseBinarizeAlpha);
//const _SDL_stdinc_h = ;
//const SDL_arraysize = (array) (sizeof(array)/sizeof(array[0]));
//const SDL_TABLESIZE = (table) SDL_arraysize(table);
//const SDL_reinterpret_cast = (type, expression) reinterpret_cast<type>(expression);
//const SDL_static_cast = (type, expression) static_cast<type>(expression);
//const SDL_const_cast = (type, expression) const_cast<type>(expression);
//const SDL_FOURCC = (A, B, C, D) ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24));
const SDL_FALSE = 0;
const SDL_TRUE = 1;
//const SDL_COMPILE_TIME_ASSERT = (name, x) typedef int SDL_dummy_ ## name[(x) * 2 - 1];
const DUMMY_ENUM_VALUE = 0;
//const alloca = __builtin_alloca;
//const SDL_stack_alloc = (type, count) (type*)alloca(sizeof(type)*(count));
//const SDL_stack_free = (data);
//const SDL_min = (x, y) (((x) < (y)) ? (x) : (y));
//const SDL_max = (x, y) (((x) > (y)) ? (x) : (y));
//const SDL_zero = (x) SDL_memset(&(x), 0, sizeof((x)));
//const SDL_zerop = (x) SDL_memset((x), 0, sizeof(*(x)));
const M_PI = 3.14159265358979323846264338327950288;
//const SDL_ICONV_ERROR = (size_t)-1;
//const SDL_ICONV_E2BIG = (size_t)-2;
//const SDL_ICONV_EILSEQ = (size_t)-3;
//const SDL_ICONV_EINVAL = (size_t)-4;
//const SDL_iconv_utf8_locale = (S) SDL_iconv_string("", "UTF-8", S, SDL_strlen(S)+1);
//const SDL_iconv_utf8_ucs2 = (S) (Uint16 *)SDL_iconv_string("UCS-2-INTERNAL", "UTF-8", S, SDL_strlen(S)+1);
//const SDL_iconv_utf8_ucs4 = (S) (Uint32 *)SDL_iconv_string("UCS-4-INTERNAL", "UTF-8", S, SDL_strlen(S)+1);
//const _SDL_surface_h = ;
const SDL_SWSURFACE = 0;
const SDL_PREALLOC = 0x00000001;
const SDL_RLEACCEL = 0x00000002;
const SDL_DONTFREE = 0x00000004;
//const SDL_MUSTLOCK = (S) (((S)->flags & SDL_RLEACCEL) != 0);
//const SDL_LoadBMP = (file) SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1);
//const SDL_SaveBMP = (surface, file) SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, "wb"), 1);
//const SDL_BlitSurface = SDL_UpperBlit;
//const SDL_BlitScaled = SDL_UpperBlitScaled;
//const _SDL_system_h = ;
const SDL_ANDROID_EXTERNAL_STORAGE_READ = 0x01;
const SDL_ANDROID_EXTERNAL_STORAGE_WRITE = 0x02;
//const _SDL_syswm_h = ;
//const WIN32_LEAN_AND_MEAN = ;
//const Cursor = X11Cursor;
const SDL_SYSWM_UNKNOWN = 0;
const SDL_SYSWM_WINDOWS = 1;
const SDL_SYSWM_X11 = 2;
const SDL_SYSWM_DIRECTFB = 3;
const SDL_SYSWM_COCOA = 4;
const SDL_SYSWM_UIKIT = 5;
//const _SDL_thread_h = ;
const SDL_THREAD_PRIORITY_LOW = 0;
const SDL_THREAD_PRIORITY_NORMAL = 1;
const SDL_THREAD_PRIORITY_HIGH = 2;
//const SDL_PASSED_BEGINTHREAD_ENDTHREAD = ;
//const SDL_CreateThread = (fn, name, data) SDL_CreateThread(fn, name, data, (pfnSDL_CurrentBeginThread)_beginthreadex, (pfnSDL_CurrentEndThread)_endthreadex);
//const _SDL_timer_h = ;
//const _SDL_touch_h = ;
//const SDL_TOUCH_MOUSEID = ((Uint32)-1);
//const _SDL_version_h = ;
const SDL_MAJOR_VERSION = 2;
const SDL_MINOR_VERSION = 0;
const SDL_PATCHLEVEL = 0;
//const SDL_VERSION = (x) { (x)->major = SDL_MAJOR_VERSION; (x)->minor = SDL_MINOR_VERSION; (x)->patch = SDL_PATCHLEVEL; };
//const SDL_VERSIONNUM = (X, Y, Z) ((X)*1000 + (Y)*100 + (Z));
//const SDL_COMPILEDVERSION = SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL);
//const SDL_VERSION_ATLEAST = (X, Y, Z) (SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z));
//const _SDL_video_h = ;
const SDL_WINDOW_FULLSCREEN = 0x00000001;
const SDL_WINDOW_OPENGL = 0x00000002;
const SDL_WINDOW_SHOWN = 0x00000004;
const SDL_WINDOW_HIDDEN = 0x00000008;
const SDL_WINDOW_BORDERLESS = 0x00000010;
const SDL_WINDOW_RESIZABLE = 0x00000020;
const SDL_WINDOW_MINIMIZED = 0x00000040;
const SDL_WINDOW_MAXIMIZED = 0x00000080;
const SDL_WINDOW_INPUT_GRABBED = 0x00000100;
const SDL_WINDOW_INPUT_FOCUS = 0x00000200;
const SDL_WINDOW_MOUSE_FOCUS = 0x00000400;
const SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 );
const SDL_WINDOW_FOREIGN = 0x00000800;
const SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF0000;
//const SDL_WINDOWPOS_UNDEFINED_DISPLAY = (X) (SDL_WINDOWPOS_UNDEFINED_MASK|(X));
//const SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_DISPLAY(0);
//const SDL_WINDOWPOS_ISUNDEFINED = (X) (((X)&0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK);
const SDL_WINDOWPOS_CENTERED_MASK = 0x2FFF0000;
//const SDL_WINDOWPOS_CENTERED_DISPLAY = (X) (SDL_WINDOWPOS_CENTERED_MASK|(X));
//const SDL_WINDOWPOS_CENTERED = SDL_WINDOWPOS_CENTERED_DISPLAY(0);
//const SDL_WINDOWPOS_ISCENTERED = (X) (((X)&0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK);
const SDL_WINDOWEVENT_NONE = 0;
const SDL_WINDOWEVENT_SHOWN = 1;
const SDL_WINDOWEVENT_HIDDEN = 2;
const SDL_WINDOWEVENT_EXPOSED = 3;
const SDL_WINDOWEVENT_MOVED = 4;
const SDL_WINDOWEVENT_RESIZED = 5;
const SDL_WINDOWEVENT_SIZE_CHANGED = 6;
const SDL_WINDOWEVENT_MINIMIZED = 7;
const SDL_WINDOWEVENT_MAXIMIZED = 8;
const SDL_WINDOWEVENT_RESTORED = 9;
const SDL_WINDOWEVENT_ENTER = 10;
const SDL_WINDOWEVENT_LEAVE = 11;
const SDL_WINDOWEVENT_FOCUS_GAINED = 12;
const SDL_WINDOWEVENT_FOCUS_LOST = 13;
const SDL_WINDOWEVENT_CLOSE = 14;
const SDL_GL_RED_SIZE = 0;
const SDL_GL_GREEN_SIZE = 1;
const SDL_GL_BLUE_SIZE = 2;
const SDL_GL_ALPHA_SIZE = 3;
const SDL_GL_BUFFER_SIZE = 4;
const SDL_GL_DOUBLEBUFFER = 5;
const SDL_GL_DEPTH_SIZE = 6;
const SDL_GL_STENCIL_SIZE = 7;
const SDL_GL_ACCUM_RED_SIZE = 8;
const SDL_GL_ACCUM_GREEN_SIZE = 9;
const SDL_GL_ACCUM_BLUE_SIZE = 10;
const SDL_GL_ACCUM_ALPHA_SIZE = 11;
const SDL_GL_STEREO = 12;
const SDL_GL_MULTISAMPLEBUFFERS = 13;
const SDL_GL_MULTISAMPLESAMPLES = 14;
const SDL_GL_ACCELERATED_VISUAL = 15;
const SDL_GL_RETAINED_BACKING = 16;
const SDL_GL_CONTEXT_MAJOR_VERSION = 17;
const SDL_GL_CONTEXT_MINOR_VERSION = 18;
const SDL_GL_CONTEXT_EGL = 19;
const SDL_GL_CONTEXT_FLAGS = 20;
const SDL_GL_CONTEXT_PROFILE_MASK = 21;
const SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 22;
const SDL_GL_CONTEXT_PROFILE_CORE = 0x0001;
const SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002;
const SDL_GL_CONTEXT_PROFILE_ES = 0x0004;
const SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001;
const SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002;
const SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004;
const SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008;
